<?xml version="1.0" encoding="ISO-8859-1"?>
<?xml-stylesheet type="text/xsl" href="input_xx.xsl"?>
<!-- FILE AUTOMATICALLY CREATED: DO NOT EDIT, CHANGES WILL BE LOST -->
    
<input_description distribution="Quantum Espresso" package="PWscf" program="pw.x" >
   <toc>
   </toc>
   <intro>
Input data format: { } = optional, [ ] = it depends, | = or

All quantities whose dimensions are not explicitly specified are in
RYDBERG ATOMIC UNITS

BEWARE: TABS, DOS &lt;CR&gt;&lt;LF&gt; CHARACTERS ARE POTENTIAL SOURCES OF TROUBLE

Structure of the input data:
===============================================================================

&amp;CONTROL
  ...
/

&amp;SYSTEM
 ...
/

&amp;ELECTRONS
...
/

[ &amp;IONS
  ...
 / ]

[ &amp;CELL
  ...
 / ]

[ &amp;EE
  ...
 / ]

ATOMIC_SPECIES
 X  Mass_X  PseudoPot_X
 Y  Mass_Y  PseudoPot_Y
 Z  Mass_Z  PseudoPot_Z

ATOMIC_POSITIONS { alat | bohr | crystal | angstrom }
  X 0.0  0.0  0.0  {if_pos(1) if_pos(2) if_pos(3)}
  Y 0.5  0.0  0.0
  Z O.0  0.2  0.2

K_POINTS { tpiba | automatic | crystal | gamma | tpiba_b | crystal_b }
if (gamma)
   nothing to read
if (automatic)
   nk1, nk2, nk3, k1, k2, k3
if (not automatic)
   nks
   xk_x, xk_y, xk_z,  wk

[ CELL_PARAMETERS { cubic | hexagonal }
   v1(1) v1(2) v1(3)
   v2(1) v2(2) v2(3)
   v3(1) v3(2) v3(3) ]

[ OCCUPATIONS
   f_inp1(1)  f_inp1(2)  f_inp1(3) ... f_inp1(10)
   f_inp1(11) f_inp1(12) ... f_inp1(nbnd)
 [ f_inp2(1)  f_inp2(2)  f_inp2(3) ... f_inp2(10)
   f_inp2(11) f_inp2(12) ... f_inp2(nbnd) ] ]

[ CONSTRAINTS
   nconstr  { constr_tol }
   constr_type(.)   constr(1,.)   constr(2,.) [ constr(3,.)   constr(4,.) ] { constr_target(.) } ]
   </intro>
   <namelist name="CONTROL" >
      <var name="calculation" type="CHARACTER" >
         <default> &apos;scf&apos;
         </default>
         <info>
a string describing the task to be performed:
   &apos;scf&apos;,
   &apos;nscf&apos;,
   &apos;bands&apos;,
   &apos;relax&apos;,
   &apos;md&apos;,
   &apos;vc-relax&apos;,
   &apos;vc-md&apos;

   (vc = variable-cell).
         </info>
      </var>
      <var name="title" type="CHARACTER" >
         <default> &apos; &apos;
         </default>
         <info>
reprinted on output.
         </info>
      </var>
      <var name="verbosity" type="CHARACTER" >
         <info>
&apos;high&apos; | &apos;default&apos; | &apos;low&apos; | &apos;minimal&apos;
         </info>
      </var>
      <var name="restart_mode" type="CHARACTER" >
         <default> &apos;from_scratch&apos;
         </default>
         <info>
&apos;from_scratch&apos;  : from scratch
                  NEB and SMD only: the starting path is obtained
                  with a linear interpolation between the images
                  specified in the ATOMIC_POSITIONS card.
                  Note that in the linear interpolation
                  periodic boundary conditions ARE NON USED.

&apos;restart&apos;       : from previous interrupted run
         </info>
      </var>
      <var name="wf_collect" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
This flag controls the way wavefunctions are stored to disk :

.TRUE.  collect wavefunctions from all processors and store
        them into the output data directory outdir/prefix.save

.FALSE. do not collect wavefunctions, leave them in temporary
        local files (one per processor). The resulting format
        will be readable only by jobs running on the same
        number of processors and pools. Useful if you do not
        need the wavefunction or if you want to reduce the I/O
        or the disk occupancy.
         </info>
      </var>
      <var name="nstep" type="INTEGER" >
         <info>
number of ionic + electronic steps
         </info>
         <default>
1  if calculation = &apos;scf&apos;, &apos;nscf&apos;, &apos;bands&apos;;
50 for the other cases
         </default>
      </var>
      <var name="iprint" type="INTEGER" >
         <default> write only at convergence
         </default>
         <info>
band energies are written every iprint iterations
         </info>
      </var>
      <var name="tstress" type="LOGICAL" >
         <default> .false.
         </default>
         <info>
calculate stress. It is set to .TRUE. automatically if
calculation=&apos;vc-md&apos; or &apos;vc-relax&apos;
         </info>
      </var>
      <var name="tprnfor" type="LOGICAL" >
         <info>
print forces. Set to .TRUE. if calculation=&apos;relax&apos;,&apos;md&apos;,&apos;vc-md&apos;
         </info>
      </var>
      <var name="dt" type="REAL" >
         <default> 20.D0
         </default>
         <info>
time step for molecular dynamics, in Rydberg atomic units
(1 a.u.=4.8378 * 10^-17 s : beware, CP and FPMD codes use
 Hartree atomic units, half that much!!!)
         </info>
      </var>
      <var name="outdir" type="CHARACTER" >
         <default>
value of the ESPRESSO_TMPDIR environment variable if set;
current directory (&apos;./&apos;) otherwise
         </default>
         <info>
input, temporary, output files are found in this directory,
see also &apos;wfcdir&apos;
         </info>
      </var>
      <var name="wfcdir" type="CHARACTER" >
         <default> same as outdir
         </default>
         <info>
this directory specifies where to store files generated by
each processor (*.wfc{N}, *.igk{N}, etc.). The idea here is
to be able to separately store the largest files, while
the files necessary for restarting still go into &apos;outdir&apos;
(for now only works for stand alone PW )
         </info>
      </var>
      <var name="prefix" type="CHARACTER" >
         <default> &apos;pwscf&apos;
         </default>
         <info>
prepended to input/output filenames:
prefix.wfc, prefix.rho, etc.
         </info>
      </var>
      <var name="lkpoint_dir" type="LOGICAL" >
         <default> .true.
         </default>
         <info>
If .false. it does not open a subdirectory for each k_point
in the prefix.save directory.
         </info>
      </var>
      <var name="max_seconds" type="REAL" >
         <default> 1.D+7, or 150 days, i.e. no time limit
         </default>
         <info>
jobs stops after max_seconds CPU time
         </info>
      </var>
      <var name="etot_conv_thr" type="REAL" >
         <default> 1.0D-4
         </default>
         <info>
convergence threshold on total energy (a.u) for ionic
minimization: the convergence criterion is satisfied
when the total energy changes less than etot_conv_thr
between two consecutive scf steps.
See also forc_conv_thr - both criteria must be satisfied
         </info>
      </var>
      <var name="forc_conv_thr" type="REAL" >
         <default> 1.0D-3
         </default>
         <info>
convergence threshold on forces (a.u) for ionic
minimization: the convergence criterion is satisfied
when all components of all forces are smaller than
forc_conv_thr.
See also etot_conv_thr - both criteria must be satisfied
         </info>
      </var>
      <var name="disk_io" type="CHARACTER" >
         <default> &apos;default&apos;
         </default>
         <info>
Specifies the amount of disk I/O activity
&apos;high&apos;:    save all data at each SCF step

&apos;default&apos;: save wavefunctions at each SCF step unless
           there is a single k-point per process

&apos;low&apos; :    store wfc in memory, save only at the end

&apos;none&apos;:    do not save wfc, not even at the end
           (guaranteed to work only for &apos;scf&apos;, &apos;nscf&apos;,
            &apos;band&apos; calculations)

If restarting from an interrupted calculation, the code
will try to figure out what is available on disk. The
more you write, the more complete the restart will be.
         </info>
      </var>
      <var name="pseudo_dir" type="CHARACTER" >
         <default>
value of the $ESPRESSO_PSEUDO environment variable if set;
&apos;$HOME/espresso/pseudo/&apos; otherwise
         </default>
         <info>
directory containing pseudopotential files
         </info>
      </var>
      <var name="tefield" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. a sawlike potential simulating an electric field
is added to the bare ionic potential. See variables
edir, eamp, emaxpos, eopreg for the form and size of
the added potential.
         </info>
      </var>
      <var name="dipfield" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. and tefield=.TRUE. a dipole correction is also
added to the bare ionic potential - implements the recipe
of L. Bengtsson, PRB 59, 12301 (1999). See variables edir,
emaxpos, eopreg for the form of the correction, that must
be used only in a slab geometry, for surface calculations,
with the discontinuity in the empty space.
         </info>
      </var>
      <var name="lelfield" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. a homogeneous finite electric field described
through the modern theory of the polarization is applied.
This is different from &quot;tefield=.true.&quot; !
         </info>
      </var>
      <var name="nberrycyc" type="INTEGER" >
         <default> 1
         </default>
         <info>
In the case of a finite electric field  ( lelfield == .TRUE. )
it defines the number of iterations for converging the
wavefunctions in the electric field Hamiltonian, for each
external iteration on the charge density
         </info>
      </var>
      <var name="lberry" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. perform a Berry phase calculation
See the header of PW/bp_c_phase.f90 for documentation
         </info>
      </var>
      <var name="gdir" type="INTEGER" >
         <info>
For Berry phase calculation: direction of the k-point
strings in reciprocal space. Allowed values: 1, 2, 3
1=first, 2=second, 3=third reciprocal lattice vector
For calculations with finite electric fields
(lelfield==.true.), gdir is the direction of the field
         </info>
      </var>
      <var name="nppstr" type="INTEGER" >
         <info>
For Berry phase calculation: number of k-points to be
calculated along each symmetry-reduced string
The same for calculation with finite electric fields
(lelfield==.true.)
         </info>
      </var>
   </namelist>
   <namelist name="SYSTEM" >
      <var name="ibrav" type="INTEGER" >
         <status> REQUIRED
         </status>
         <info>
Bravais-lattice index:

  ibrav        structure                   celldm(2)-celldm(6)

    0          &quot;free&quot;, see above                 not used
    1          cubic P (sc)                      not used
    2          cubic F (fcc)                     not used
    3          cubic I (bcc)                     not used
    4          Hexagonal and Trigonal P        celldm(3)=c/a
    5          Trigonal R                      celldm(4)=cos(alpha)
    6          Tetragonal P (st)               celldm(3)=c/a
    7          Tetragonal I (bct)              celldm(3)=c/a
    8          Orthorhombic P                  celldm(2)=b/a,celldm(3)=c/a
    9          Orthorhombic base-centered(bco) celldm(2)=b/a,celldm(3)=c/a
   10          Orthorhombic face-centered      celldm(2)=b/a,celldm(3)=c/a
   11          Orthorhombic body-centered      celldm(2)=b/a,celldm(3)=c/a
   12          Monoclinic P                    celldm(2)=b/a,celldm(3)=c/a,
                                               celldm(4)=cos(ab)
   13          Monoclinic base-centered        celldm(2)=b/a,celldm(3)=c/a,
                                               celldm(4)=cos(ab)
   14          Triclinic                       celldm(2)= b/a,
                                               celldm(3)= c/a,
                                               celldm(4)= cos(bc),
                                               celldm(5)= cos(ac),
                                               celldm(6)= cos(ab)

For P lattices: the special axis (c) is the z-axis, one basal-plane
vector (a) is along x, the other basal-plane vector (b) is at angle
gamma for monoclinic, at 120 degrees for trigonal and hexagonal
lattices, at 90 degrees for cubic, tetragonal, orthorhombic lattices

sc simple cubic
====================
v1 = a(1,0,0),  v2 = a(0,1,0),  v3 = a(0,0,1)

fcc face centered cubic
====================
v1 = (a/2)(-1,0,1),  v2 = (a/2)(0,1,1), v3 = (a/2)(-1,1,0).

bcc body entered cubic
====================
v1 = (a/2)(1,1,1),  v2 = (a/2)(-1,1,1),  v3 = (a/2)(-1,-1,1).

simple hexagonal and trigonal(p)
====================
v1 = a(1,0,0),  v2 = a(-1/2,sqrt(3)/2,0),  v3 = a(0,0,c/a).

trigonal(r)
===================
for these groups, the z-axis is chosen as the 3-fold axis, but the
crystallographic vectors form a three-fold star around the z-axis,
and the primitive cell is a simple rhombohedron. The crystallographic
vectors are:
      v1 = a(tx,-ty,tz),   v2 = a(0,2ty,tz),   v3 = a(-tx,-ty,tz).
where c=cos(alpha) is the cosine of the angle alpha between any pair
of crystallographic vectors, tc, ty, tz are defined as
     tx=sqrt((1-c)/2), ty=sqrt((1-c)/6), tz=sqrt((1+2c)/3)

simple tetragonal (p)
====================
   v1 = a(1,0,0),  v2 = a(0,1,0),  v3 = a(0,0,c/a)

body centered tetragonal (i)
================================
   v1 = (a/2)(1,-1,c/a),  v2 = (a/2)(1,1,c/a),  v3 = (a/2)(-1,-1,c/a).

simple orthorhombic (p)
=============================
   v1 = (a,0,0),  v2 = (0,b,0), v3 = (0,0,c)

bco base centered orthorhombic
=============================
   v1 = (a/2,b/2,0),  v2 = (-a/2,b/2,0),  v3 = (0,0,c)

face centered orthorhombic
=============================
   v1 = (a/2,0,c/2),  v2 = (a/2,b/2,0),  v3 = (0,b/2,c/2)

body centered orthorhombic
=============================
   v1 = (a/2,b/2,c/2),  v2 = (-a/2,b/2,c/2),  v3 = (-a/2,-b/2,c/2)

monoclinic (p)
=============================
   v1 = (a,0,0), v2= (b*cos(gamma), b*sin(gamma), 0),  v3 = (0, 0, c)
where gamma is the angle between axis a and b

base centered monoclinic
=============================
   v1 = (  a/2,         0,                -c/2),
   v2 = (b*cos(gamma), b*sin(gamma), 0),
   v3 = (  a/2,         0,                  c/2),
where gamma is the angle between axis a and b

triclinic
=============================
   v1 = (a, 0, 0),
   v2 = (b*cos(gamma), b*sin(gamma), 0)
   v3 = (c*cos(beta),  c*(cos(alpha)-cos(beta)cos(gamma))/sin(gamma),
         c*sqrt( 1 + 2*cos(alpha)cos(beta)cos(gamma)
                   - cos(alpha)^2-cos(beta)^2-cos(gamma)^2 )/sin(gamma) )
where alpha is the angle between axis b and c
       beta is the angle between axis a and c
      gamma is the angle between axis a and b
         </info>
      </var>
      <group>
         <label> Either:
         </label>
         <dimension name="celldm" start="1" end="6" type="REAL" >
            <see> ibrav
            </see>
            <info>
Crystallographic constants - see description of ibrav variable.

* alat = celldm(1) is the lattice parameter &quot;a&quot; (in BOHR)
* only needed celldm (depending on ibrav) must be specified
* if ibrav=0 only alat = celldm(1) is used (if present)
            </info>
         </dimension>
         <label> Or:
         </label>
         <vargroup type="REAL" >
            <var name="A" >
            </var>
            <var name="B" >
            </var>
            <var name="C" >
            </var>
            <var name="cosAB" >
            </var>
            <var name="cosAC" >
            </var>
            <var name="cosBC" >
            </var>
            <info>
Traditional crystallographic constants (a,b,c in ANGSTROM),
cosab = cosine of the angle between axis a and b
specify either these OR celldm but NOT both.

The axis are chosen according to the value of ibrav.
If ibrav is not specified, the axis are taken from card
CELL_PARAMETERS and only a is used as lattice parameter.
            </info>
         </vargroup>
      </group>
      <var name="nat" type="INTEGER" >
         <status> REQUIRED
         </status>
         <info>
number of atoms in the unit cell
         </info>
      </var>
      <var name="ntyp" type="INTEGER" >
         <status> REQUIRED
         </status>
         <info>
number of types of atoms in the unit cell
         </info>
      </var>
      <var name="nbnd" type="INTEGER" >
         <default>
for an insulator, nbnd = number of valence bands
(nbnd = # of electrons /2);
for a metal, 20% more (minimum 4 more)
         </default>
         <info>
number of electronic states (bands) to be calculated.
Note that in spin-polarized calculations the number of
k-point, not the number of bands per k-point, is doubled
         </info>
      </var>
      <var name="tot_charge" type="REAL" >
         <default> 0.0
         </default>
         <info>
total charge of the system. Useful for simulations with charged cells.
By default the unit cell is assumed to be neutral (tot_charge=0).
tot_charge=+1 means one electron missing from the system,
tot_charge=-1 means one additional electron, and so on.

In a periodic calculation a compensating jellium background is
inserted to remove divergences if the cell is not neutral.
         </info>
      </var>
      <var name="tot_magnetization" type="REAL" >
         <default> -1 [unspecified]
         </default>
         <info>
total majority spin charge - minority spin charge.
Used to impose a specific total electronic magnetization.
If unspecified then tot_magnetization variable is ignored and
the amount of electronic magnetization is determined during
the self-consistent cycle.
         </info>
      </var>
      <dimension name="starting_magnetization" start="1" end="ntyp" type="REAL" >
         <info>
starting spin polarization on atomic type &apos;i&apos; in a spin
polarized calculation. Values range between -1 (all spins
down for the valence electrons of atom type &apos;i&apos;) to 1
(all spins up). Breaks the symmetry and provides a starting
point for self-consistency. The default value is zero, BUT a
value MUST be specified for AT LEAST one atomic type in spin
polarized calculations, unless you constrain the magnetization
(see &quot;tot_magnetization&quot; and &quot;constrained_magnetization&quot;).
Note that if you start from zero initial magnetization, you
will invariably end up in a nonmagnetic (zero magnetization)
state. If you want to start from an antiferromagnetic state,
you may need to define two different atomic species
corresponding to sublattices of the same atomic type.
starting_magnetization is ignored if you are performing a
non-scf calculation, if you are restarting from a previous
run, or restarting from an interrupted run.
If you fix the magnetization with &quot;tot_magnetization&quot;,
you should not specify starting_magnetization.
         </info>
      </dimension>
      <var name="ecutwfc" type="REAL" >
         <status> REQUIRED
         </status>
         <info>
kinetic energy cutoff (Ry) for wavefunctions
         </info>
      </var>
      <var name="ecutrho" type="REAL" >
         <default> 4 * ecutwfc
         </default>
         <info>
kinetic energy cutoff (Ry) for charge density and potential
For norm-conserving pseudopotential you should stick to the
default value, you can reduce it by a little but it will
introduce noise especially on forces and stress.
If there are ultrasoft PP, a larger value than the default is
often desirable (ecutrho = 8 to 12 times ecutwfc, typically).
PAW datasets can often be used at 4*ecutwfc, but it depends
on the shape of augmentation charge: testing is mandatory.
The use of gradient-corrected functional, especially in cells
with vacuum, or for pseudopotential without non-linear core
correction, usually requires an higher values of ecutrho
to be accurately converged.
         </info>
      </var>
      <vargroup type="INTEGER" >
         <var name="nr1" >
         </var>
         <var name="nr2" >
         </var>
         <var name="nr3" >
         </var>
         <info>
three-dimensional FFT mesh (hard grid) for charge
density (and scf potential). If not specified
the grid is calculated based on the cutoff for
charge density (see also &quot;ecutrho&quot;)
         </info>
      </vargroup>
      <vargroup type="INTEGER" >
         <var name="nr1s" >
         </var>
         <var name="nr2s" >
         </var>
         <var name="nr3s" >
         </var>
         <info>
three-dimensional mesh for wavefunction FFT and for the smooth
part of charge density ( smooth grid ).
Coincides with nr1, nr2, nr3 if ecutrho = 4 * ecutwfc ( default )
         </info>
      </vargroup>
      <var name="nosym" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.TRUE.) symmetry is not used. Note that a k-point grid
provided in input is used &quot;as is&quot;; an automatically generated
k-point grid will contain only points in the irreducible BZ
of the lattice.  Use with care in low-symmetry large cells
if you cannot afford a k-point grid with the correct symmetry.
         </info>
      </var>
      <var name="nosym_evc" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if(.TRUE.) symmetry is not used but the k-points are
forced to have the symmetry of the Bravais lattice;
an automatically generated k-point grid will contain
all the k-points of the grid and the points rotated by
the symmetries of the Bravais lattice which are not in the
original grid. If available, time reversal is
used to reduce the k-points (and the q =&gt; -q symmetry
is used in the phonon code). To disable also this symmetry set
noinv=.TRUE..
         </info>
      </var>
      <var name="noinv" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.TRUE.) disable the usage of time reversal (q =&gt; -q)
symmetry in k-point generation
         </info>
      </var>
      <var name="no_t_rev" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.TRUE.) disable the usage of symmetry operations that
require time reversal.
         </info>
      </var>
      <var name="force_symmorphic" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if (.TRUE.) force the symmetry group to be symmorphic by disabling
symmetry operations having an associated fractionary translation
         </info>
      </var>
      <var name="occupations" type="CHARACTER" >
         <info>
&apos;smearing&apos;:     gaussian smearing for metals
                requires a value for degauss

&apos;tetrahedra&apos; :  especially suited for calculation of DOS
                (see P.E. Bloechl, PRB49, 16223 (1994))
                Requires uniform grid of k-points,
                automatically generated (see below)
                Not suitable (because not variational) for
                force/optimization/dynamics calculations

&apos;fixed&apos; :       for insulators with a gap

&apos;from_input&apos; :  The occupation are read from input file.
                Presently works only with one k-point
                (LSDA, noncolinear allowed).
         </info>
      </var>
      <var name="one_atom_occupations" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
This flag is used for isolated atoms (nat=1) together with
occupations=&apos;from_input&apos;. If it is .TRUE., the wavefunctions
are ordered as the atomic starting wavefunctions, independently
from their eigenvalue. The occupations indicate which atomic
states are filled.
The order of the states is written inside the UPF
pseudopotential file.
In the scalar relativistic case:
S -&gt; l=0, m=0
P -&gt; l=1, z, x, y
D -&gt; l=2, r^2-3z^2, xz, yz, xy, x^2-y^2
In the noncollinear magnetic case (with or without spin-orbit),
each group of states is doubled. For instance:
P -&gt; l=1, z, x, y for spin up, l=1, z, x, y for spin down.
Up and down is relative to the direction of the starting
magnetization.
In the case with spin-orbit and time-reversal
(starting_magnetization=0.0) the atomic wavefunctions are
radial functions multiplied by spin-angle functions.
For instance:
P -&gt; l=1, j=1/2, m_j=-1/2,1/2. l=1, j=3/2,
     m_j=-3/2, -1/2, 1/2, 3/2.
In the magnetic case with spin-orbit the atomic wavefunctions
can be forced to be spin-angle functions by setting
starting_spin_angle to .TRUE..
         </info>
      </var>
      <var name="starting_spin_angle" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
In the spin-orbit case when domag=.TRUE., by default,
the starting wavefunctions are initialized as in scalar
relativistic noncollinear case without spin-orbit.
By setting starting_spin_angle=.TRUE. this behaviour can
be changed and the initial wavefunctions are radial
functions multiplied by spin-angle functions.
When domag=.FALSE. the initial wavefunctions are always
radial functions multiplied by spin-angle functions
independently from this flag.
When lspinorb is .FALSE. this flag is not used.
         </info>
      </var>
      <var name="degauss" type="REAL" >
         <default> 0.D0 Ry
         </default>
         <info>
value of the gaussian spreading (Ry) for brillouin-zone
integration in metals.
         </info>
      </var>
      <var name="smearing" type="CHARACTER" >
         <default> &apos;gaussian&apos;
         </default>
         <info>
&apos;gaussian&apos;, &apos;gauss&apos;:
    ordinary Gaussian spreading (Default)

&apos;methfessel-paxton&apos;, &apos;m-p&apos;, &apos;mp&apos;:
    Methfessel-Paxton first-order spreading
    (see PRB 40, 3616 (1989)).

&apos;marzari-vanderbilt&apos;, &apos;cold&apos;, &apos;m-v&apos;, &apos;mv&apos;:
    Marzari-Vanderbilt cold smearing
    (see PRL 82, 3296 (1999))

&apos;fermi-dirac&apos;, &apos;f-d&apos;, &apos;fd&apos;:
    smearing with Fermi-Dirac function
         </info>
      </var>
      <var name="nspin" type="INTEGER" >
         <default> 1
         </default>
         <info>
nspin = 1 :  non-polarized calculation (default)

nspin = 2 :  spin-polarized calculation, LSDA
             (magnetization along z axis)

nspin = 4 :  spin-polarized calculation, noncollinear
             (magnetization in generic direction)
             DO NOT specify nspin in this case;
             specify &quot;noncolin=.TRUE.&quot; instead
         </info>
      </var>
      <var name="noncolin" type="LOGICAL" >
         <default> .false.
         </default>
         <info>
if .true. the program will perform a noncollinear calculation.
         </info>
      </var>
      <var name="ecfixed" type="REAL" >
         <default> 0.0
         </default>
         <see> q2sigma
         </see>
      </var>
      <var name="qcutz" type="REAL" >
         <default> 0.0
         </default>
         <see> q2sigma
         </see>
      </var>
      <var name="q2sigma" type="REAL" >
         <default> 0.1
         </default>
         <info>
ecfixed, qcutz, q2sigma:  parameters for modified functional to be
used in variable-cell molecular dynamics (or in stress calculation).
&quot;ecfixed&quot; is the value (in Rydberg) of the constant-cutoff;
&quot;qcutz&quot; and &quot;q2sigma&quot; are the height and the width (in Rydberg)
of the energy step for reciprocal vectors whose square modulus
is greater than &quot;ecfixed&quot;. In the kinetic energy, G^2 is
replaced by G^2 + qcutz * (1 + erf ( (G^2 - ecfixed)/q2sigma) )
See: M. Bernasconi et al, J. Phys. Chem. Solids 56, 501 (1995)
         </info>
      </var>
      <var name="input_dft" type="CHARACTER" >
         <default> read from pseudopotential files
         </default>
         <info>
Exchange-correlation functional: eg &apos;PBE&apos;, &apos;BLYP&apos; etc
See Modules/functionals.f90 for allowed values.
Overrides the value read from pseudopotential files.
Use with care and if you know what you are doing!
         </info>
      </var>
      <var name="lda_plus_u" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <see> Hubbard_U
         </see>
      </var>
      <dimension name="Hubbard_alpha" start="1" end="ntyp" type="REAL" >
         <default> 0.D0 for all species
         </default>
         <see> Hubbard_U
         </see>
      </dimension>
      <dimension name="Hubbard_U" start="1" end="ntyp" type="REAL" >
         <default> 0.D0 for all species
         </default>
         <status>
LDA+U works only for a few selected elements. Modify
PW/set_hubbard_l.f90 and PW/tabd.f90 if you plan to use LDA+U with an
element that is not configured there.
         </status>
         <info>
lda_plus_u, Hubbard_alpha(i), Hubbard_U(i): parameters for LDA+U calculations

If lda_plus_u = .TRUE. you must specify, for species i,
the parameters U and (optionally) alpha of the Hubbard model (both in eV).

See: Anisimov, Zaanen, and Andersen, PRB 44, 943 (1991); Anisimov
et al., PRB 48, 16929 (1993); Liechtenstein, Anisimov, and Zaanen, PRB
52, R5467 (1994); Cococcioni and de Gironcoli, PRB 71, 035105 (2005).
         </info>
      </dimension>
      <var name="starting_ns_eigenvalue(m,ispin,I)" type="REAL" >
         <default> -1.d0 that means NOT SET
         </default>
         <info>
In the first iteration of an LDA+U run it overwrites
the m-th eigenvalue of the ns occupation matrix for the
ispin component of atomic species I. Leave unchanged
eigenvalues that are not set. This is useful to suggest
the desired orbital occupations when the default choice
takes another path.
         </info>
      </var>
      <var name="U_projection_type" type="CHARACTER" >
         <default> &apos;atomic&apos;
         </default>
         <info>
Only active when lda_plus_U is .true., specifies the type
of projector on localized orbital to be used in the LDA+U
scheme.

Currently available choices:
&apos;atomic&apos;: use atomic wfc&apos;s (as they are) to build the projector

&apos;ortho-atomic&apos;: use Lowdin orthogonalized atomic wfc&apos;s

&apos;norm-atomic&apos;:  Lowdin normalization of atomic wfc. Keep in mind:
                atomic wfc are not orthogonalized in this case.
                This is a &quot;quick and dirty&quot; trick to be used when
                atomic wfc from the pseudopotential are not
                normalized (and thus produce occupation whose
                value exceeds unity). If orthogonalized wfc are
                not needed always try &apos;atomic&apos; first.

&apos;file&apos;:         use the information from file &quot;prefix&quot;.atwfc that must
                have been generated previously, for instance by pmw.x
                (see PP/poormanwannier.f90 for details)

NB: forces and stress currently implemented only for the
&apos;atomic&apos; choice.
         </info>
      </var>
      <var name="edir" type="INTEGER" >
         <info>
The direction of the electric field or dipole correction is
parallel to the bg(:,edir) reciprocal lattice vector, so the
potential is constant in planes defined by FFT grid points;
edir = 1, 2 or 3. Used only if tefield is .TRUE.
         </info>
      </var>
      <var name="emaxpos" type="REAL" >
         <default> 0.5D0
         </default>
         <info>
Position of the maximum of the sawlike potential along crystal
axis &quot;edir&quot;, within the  unit cell (see below), 0 &lt; emaxpos &lt; 1
Used only if tefield is .TRUE.
         </info>
      </var>
      <var name="eopreg" type="REAL" >
         <default> 0.1D0
         </default>
         <info>
Zone in the unit cell where the sawlike potential decreases.
( see below, 0 &lt; eopreg &lt; 1 ). Used only if tefield is .TRUE.
         </info>
      </var>
      <var name="eamp" type="REAL" >
         <default> 0.001 a.u.
         </default>
         <info>
Amplitude of the electric field, in ***Hartree*** a.u.;
1 a.u. = 51.4220632*10^10 V/m). Used only if tefield=.TRUE.
The sawlike potential increases with slope &quot;eamp&quot; in the
region from (emaxpos+eopreg-1) to (emaxpos), then decreases
to 0 until (emaxpos+eopreg), in units of the crystal
vector &quot;edir&quot;. Important: the change of slope of this
potential must be located in the empty region, or else
unphysical forces will result.
         </info>
      </var>
      <dimension name="angle1" start="1" end="ntyp" type="REAL" >
         <info>
The angle expressed in degrees between the initial
magnetization and the z-axis. For noncollinear calculations
only; index i runs over the atom types.
         </info>
      </dimension>
      <dimension name="angle2" start="1" end="ntyp" type="REAL" >
         <info>
The angle expressed in degrees between the projection
of the initial magnetization on x-y plane and the x-axis.
For noncollinear calculations only.
         </info>
      </dimension>
      <var name="constrained_magnetization" type="CHARACTER" >
         <see> lambda, fixed_magnetization
         </see>
         <default> &apos;none&apos;
         </default>
         <info>
Used to perform constrained calculations in magnetic systems.
Currently available choices:

&apos;none&apos;:
         no constraint

&apos;total&apos;:
         total magnetization is constrained by
         adding a penalty functional to the total energy:

         LAMBDA * SUM_{i} ( magnetization(i) - fixed_magnetization(i) )**2

         where the sum over i runs over the three components of
         the magnetization. Lambda is a real number (see below).
         Noncolinear case only. Use &quot;tot_magnetization&quot; for LSDA

&apos;atomic&apos;:
         atomic magnetization are constrained to the defined
         starting magnetization adding a penalty:

         LAMBDA * SUM_{i,itype} ( magnetic_moment(i,itype) - mcons(i,itype) )**2

         where i runs over the cartesian components (or just z
         in the collinear case) and itype over the types (1-ntype).
         mcons(:,:) array is defined from starting_magnetization,
         (and angle1, angle2 in the non-collinear case). lambda is
         a real number

&apos;total direction&apos;:
          the angle theta of the total magnetization
          with the z axis (theta = fixed_magnetization(3))
          is constrained:

          LAMBDA * ( arccos(magnetization(3)/mag_tot) - theta )**2

          where mag_tot is the modulus of the total magnetization.

&apos;atomic direction&apos;:
          not all the components of the atomic
          magnetic moment are constrained but only the cosine
          of angle1, and the penalty functional is:

          LAMBDA * SUM_{itype} ( mag_mom(3,itype)/mag_mom_tot - cos(angle1(ityp)) )**2

N.B.: symmetrization may prevent to reach the desired orientation
      of the magnetization. Try not to start with very highly symmetric
      configurations or use the nosym flag (only as a last remedy)
         </info>
      </var>
      <dimension name="fixed_magnetization" start="1" end="3" type="REAL" >
         <see> constrained_magnetization
         </see>
         <default> 0.d0
         </default>
         <info>
value of the total magnetization to be maintained fixed when
constrained_magnetization=&apos;total&apos;
         </info>
      </dimension>
      <var name="lambda" type="REAL" >
         <see> constrained_magnetization
         </see>
         <default> 1.d0
         </default>
         <info>
parameter used for constrained_magnetization calculations
N.B.: if the scf calculation does not converge, try to reduce lambda
      to obtain convergence, then restart the run with a larger lambda
         </info>
      </var>
      <var name="report" type="INTEGER" >
         <default> 1
         </default>
         <info>
It is the number of iterations after which the program
write all the atomic magnetic moments.
         </info>
      </var>
      <var name="lspinorb" type="LOGICAL" >
         <info>
if .TRUE. the noncollinear code can use a pseudopotential with
spin-orbit.
         </info>
      </var>
      <var name="assume_isolated" type="CHARACTER" >
         <default> &apos;none&apos;
         </default>
         <info>
Used to perform calculation assuming the system to be
isolated (a molecule of a clustr in a 3D supercell).

Currently available choices:

&apos;none&apos; (default): regular periodic calculation w/o any correction.

&apos;makov-payne&apos;, &apos;m-p&apos;, &apos;mp&apos; : the Makov-Payne correction to the
         total energy is computed. An estimate of the vacuum
         level is also calculated so that eigenvalues can be
         properly aligned.
         Theory:
         G.Makov, and M.C.Payne,
         &quot;Periodic boundary conditions in ab initio
         calculations&quot; , Phys.Rev.B 51, 4014 (1995)

&apos;dcc&apos; :  density counter charge correction.
         The electrostatic problem is solved in open boundary
         conditions (OBC). This approach provides the correct
         scf potential and energies (not just a correction to
         energies as &apos;mp&apos;). BEWARE: the molecule should be
         centered around the middle of the cell, not around
         the origin (0,0,0).
         The OBC problem is solved using a multi-grid algorithm
         that requires additional input provided in the separate
         namelist EE (see later).
         Theory described in:
         I.Dabo, B.Kozinsky, N.E.Singh-Miller and N.Marzari,
         &quot;Electrostatic periodic boundary conditions and
         real-space corrections&quot;, Phys.Rev.B 77, 115139 (2008)

&apos;martyna-tuckerman&apos;, &apos;m-t&apos;, &apos;mt&apos; : Martyna-Tuckerman correction.
         As for the dcc correction the scf potential is also
         corrected. Implementation adapted from:
         G.J. Martyna, and M.E. Tuckerman,
         &quot;A reciprocal space based method for treating long
         range interactions in ab-initio and force-field-based
         calculation in clusters&quot;, J.Chem.Phys. 110, 2810 (1999)
         </info>
      </var>
      <var name="london" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
if .TRUE. compute semi-empirical dispersion term (DFT-D).
See S. Grimme, J. Comp. Chem. 27, 1787 (2006), and
V. Barone et al., J. Comp. Chem. 30, 934 (2009).
         </info>
      </var>
      <var name="london_s6" type="REAL" >
         <default> 0.75
         </default>
         <info>
global scaling parameter for DFT-D. Default is good for PBE.
         </info>
      </var>
      <var name="london_rcut" type="REAL" >
         <default> 200
         </default>
         <info>
cutoff radius (a.u.) for dispersion interactions
         </info>
      </var>
   </namelist>
   <namelist name="ELECTRONS" >
      <var name="electron_maxstep" type="INTEGER" >
         <default> 100
         </default>
         <info>
maximum number of iterations in a scf step
         </info>
      </var>
      <var name="conv_thr" type="REAL" >
         <default> 1.D-6
         </default>
         <info>
Convergence threshold for selfconsistency:
estimated energy error &lt; conv_thr
         </info>
      </var>
      <var name="mixing_mode" type="CHARACTER" >
         <default> &apos;plain&apos;
         </default>
         <info>
&apos;plain&apos; :    charge density Broyden mixing

&apos;TF&apos; :       as above, with simple Thomas-Fermi screening
            (for highly homogeneous systems)

&apos;local-TF&apos;:  as above, with local-density-dependent TF screening
             (for highly inhomogeneous systems)
         </info>
      </var>
      <var name="mixing_beta" type="REAL" >
         <default> 0.7D0
         </default>
         <info>
mixing factor for self-consistency
         </info>
      </var>
      <var name="mixing_ndim" type="INTEGER" >
         <default> 8
         </default>
         <info>
number of iterations used in mixing scheme
         </info>
      </var>
      <var name="mixing_fixed_ns" type="INTEGER" >
         <default> 0
         </default>
         <info>
For LDA+U : number of iterations with fixed ns ( ns is the
  atomic density appearing in the Hubbard term ).
         </info>
      </var>
      <var name="diagonalization" type="CHARACTER" >
         <default> &apos;david&apos;
         </default>
         <info>
&apos;david&apos;:  Davidson iterative diagonalization with overlap matrix
          (default). Fast, may in some rare cases fail.

&apos;cg&apos; :    conjugate-gradient-like band-by-band diagonalization
          Typically slower than &apos;david&apos; but it uses less memory
          and is more robust (it seldom fails)

&apos;cg-serial&apos;, &apos;david-serial&apos;: obsolete, use &quot;-ndiag 1 instead&quot;
          The subspace diagonalization in Davidson is performed
          by a fully distributed-memory parallel algorithm on
          4 or more processors, by default. The allocated memory
          scales down with the number of procs. Procs involved
          in diagonalization can be changed with command-line
          option &quot;-ndiag N&quot;. On multicore CPUs it is often
          convenient to let just one core per CPU to work
          on linear algebra.
         </info>
      </var>
      <var name="ortho_para" type="INTEGER" >
         <default> 0
         </default>
         <status> OBSOLETE: use command-line option &quot; -ndiag XX&quot; instead
         </status>
         <info>

         </info>
      </var>
      <var name="diago_thr_init" type="REAL" >
         <info>
Convergence threshold for the first iterative diagonalization
(the check is on eigenvalue convergence).
For scf calculations, the default is 1.D-2 if starting from a
superposition of atomic orbitals; 1.D-5 if starting from a
charge density. During self consistency the threshold (ethr)
is automatically reduced when approaching convergence.
For non-scf calculations, this is the threshold used in the
iterative diagonalization. The default is conv_thr /N elec.
         </info>
      </var>
      <var name="diago_cg_maxiter" type="INTEGER" >
         <info>
For conjugate gradient diagonalization:
max number of iterations
         </info>
      </var>
      <var name="diago_david_ndim" type="INTEGER" >
         <default> 4
         </default>
         <info>
For Davidson diagonalization: dimension of workspace
(number of wavefunction packets, at least 2 needed).
A larger value may yield a somewhat faster algorithm
but uses more memory. The opposite holds for smaller values.
Try diago_david_ndim=2 if you are tight on memory or if
your job is large: the speed penalty is often negligible
         </info>
      </var>
      <var name="diago_full_acc" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .TRUE. all the empty states are diagonalized at the same level
of accuracy of the occupied ones. Otherwise the empty states are
diagonalized using a larger threshold (this should not affect
total energy, forces, and other ground-state properties).
         </info>
      </var>
      <var name="efield" type="REAL" >
         <default> 0.D0
         </default>
         <info>
Amplitude of the finite electric field (in Ry a.u.;
1 a.u. = 36.3609*10^10 V/m). Used only if lelfield=.TRUE.
and if k-points (K_POINTS card) are not automatic.
         </info>
      </var>
      <dimension name="efield_cart" start="1" end="3" type="REAL" >
         <default> (0.D0, 0.D0, 0.D0)
         </default>
         <info>
Finite electric field (in Ry a.u.=36.3609*10^10 V/m) in
cartesian axis. Used only if lelfield=.TRUE. and if
k-points (K_POINTS card) are automatic.
         </info>
      </dimension>
      <var name="startingpot" type="CHARACTER" >
         <info>
&apos;atomic&apos;: starting potential from atomic charge superposition
          ( default for scf, *relax, *md )

&apos;file&apos;  : start from existing &quot;charge-density.xml&quot; file
          ( default, only possibility for nscf, bands )
         </info>
      </var>
      <var name="startingwfc" type="CHARACTER" >
         <default> &apos;atomic+random&apos;
         </default>
         <info>
&apos;atomic&apos;: start from superposition of atomic orbitals
          If not enough atomic orbitals are available,
          fill with random numbers the remaining wfcs
          The scf typically starts better with this option,
          but in some high-symmetry cases one can &quot;loose&quot;
          valence states, ending up in the wrong ground state.

&apos;atomic+random&apos;: as above, plus a superimposed &quot;randomization&quot;
          of atomic orbitals. Prevents the &quot;loss&quot; of states
          mentioned above.

&apos;random&apos;: start from random wfcs. Slower start of scf but safe.
          It may also reduce memory usage in conjunction with
          diagonalization=&apos;cg&apos;

&apos;file&apos;:   start from a wavefunction file
         </info>
      </var>
      <var name="tqr" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
If .true., use the real-space algorithm for augmentation
charges in ultrasoft pseudopotentials.
Must faster execution of ultrasoft-related calculations,
but numerically less accurate than the default algorithm.
Use with care and after testing!
         </info>
      </var>
   </namelist>
   <namelist name="IONS" >
      <label>
input this namelist only if calculation = &apos;relax&apos;, &apos;md&apos;, &apos;vc-relax&apos;, &apos;vc-md&apos;
      </label>
      <var name="ion_dynamics" type="CHARACTER" >
         <info>
Specify the type of ionic dynamics.

For different type of calculation different possibilities are
allowed and different default values apply:

CASE ( calculation = &apos;relax&apos; )
    &apos;bfgs&apos; :   (default)   use BFGS quasi-newton algorithm,
                           based on the trust radius procedure,
                           for structural relaxation
    &apos;damp&apos; :               use damped (quick-min Verlet)
                           dynamics for structural relaxation
                           Can be used for constrained
                           optimisation: see CONSTRAINTS card

CASE ( calculation = &apos;md&apos; )
    &apos;verlet&apos; : (default)   use Verlet algorithm to integrate
                           Newton&apos;s equation. For constrained
                           dynamics, see CONSTRAINTS card
    &apos;langevin&apos;             ion dynamics is over-damped Langevin

CASE ( calculation = &apos;vc-relax&apos; )
    &apos;bfgs&apos; :   (default)   use BFGS quasi-newton algorithm;
                           cell_dynamics must be &apos;bfgs&apos; too
    &apos;damp&apos; :               use damped (Beeman) dynamics for
                           structural relaxation
CASE ( calculation = &apos;vc-md&apos; )
    &apos;beeman&apos; : (default)   use Beeman algorithm to integrate
                           Newton&apos;s equation
         </info>
      </var>
      <var name="ion_positions" type="CHARACTER" >
         <default> &apos;default&apos;
         </default>
         <info>
&apos;default &apos;  : if restarting, use atomic positions read from the
              restart file; in all other cases, use atomic
              positions from standard input.

&apos;from_input&apos; : restart the simulation with atomic positions read
              from standard input, even if restarting.
         </info>
      </var>
      <var name="phase_space" type="CHARACTER" >
         <default> &apos;full&apos;
         </default>
         <info>
&apos;full&apos; :           the full phase-space is used for the ionic
                   dynamics.

&apos;coarse-grained&apos; : a coarse-grained phase-space, defined by a set
                   of constraints, is used for the ionic dynamics
                   (used for calculation of free-energy barriers)
         </info>
      </var>
      <var name="pot_extrapolation" type="CHARACTER" >
         <default> &apos;atomic&apos;
         </default>
         <info>
   Used to extrapolate the potential from preceding ionic steps.

   &apos;none&apos;        :  no extrapolation

   &apos;atomic&apos;      :  extrapolate the potential as if it was a sum of
                    atomic-like orbitals

   &apos;first_order&apos; :  extrapolate the potential with first-order
                    formula

   &apos;second_order&apos;:  as above, with second order formula

Note: &apos;first_order&apos; and &apos;second-order&apos; extrapolation make sense
only for molecular dynamics calculations
         </info>
      </var>
      <var name="wfc_extrapolation" type="CHARACTER" >
         <default> &apos;none&apos;
         </default>
         <info>
    Used to extrapolate the wavefunctions from preceding ionic steps.

   &apos;none&apos;        :  no extrapolation

   &apos;first_order&apos; :  extrapolate the wave-functions with first-order
                    formula.

   &apos;second_order&apos;:  as above, with second order formula.

Note: &apos;first_order&apos; and &apos;second-order&apos; extrapolation make sense
only for molecular dynamics calculations
         </info>
      </var>
      <var name="remove_rigid_rot" type="LOGICAL" >
         <default> .FALSE.
         </default>
         <info>
This keyword is useful when simulating the dynamics and/or the
thermodynamics of an isolated system. If set to true the total
torque of the internal forces is set to zero by adding new forces
that compensate the spurious interaction with the periodic
images. This allows for the use of smaller supercells.

BEWARE: since the potential energy is no longer consistent with
the forces (it still contains the spurious interaction with the
repeated images), the total energy is not conserved anymore.
However the dynamical and thermodynamical properties should be
in closer agreement with those of an isolated system.
Also the final energy of a structural relaxation will be higher,
but the relaxation itself should be faster.
         </info>
      </var>
      <group>
         <label>
keywords used for molecular dynamics
         </label>
         <var name="ion_temperature" type="CHARACTER" >
            <default> &apos;not_controlled&apos;
            </default>
            <info>
&apos;rescaling&apos;   control ionic temperature via velocity rescaling
              (first method) see parameters &quot;tempw&quot; and &quot;tolp&quot;
              This is the only method implemented in VC-MD

&apos;rescale-v&apos;   control ionic temperature via velocity rescaling
              (second method) see parameters &quot;tempw&quot; and &quot;nraise&quot;

&apos;rescale-T&apos;   control ionic temperature via velocity rescaling
              (third method) see parameter &quot;delta_t&quot;

&apos;reduce-T&apos;    reduce ionic temperature every &quot;nraise&quot; steps
              by the (negative) value &quot;delta_t&quot;

&apos;berendsen&apos;   control ionic temperature using &quot;soft&quot; velocity
              rescaling - see parameters &quot;tempw&quot; and &quot;nraise&quot;

&apos;andersen&apos;    control ionic temperature using Andersen thermostat
              see parameters &quot;tempw&quot; and &quot;nraise&quot;

&apos;initial&apos;     initialize ion velocities to temperature &quot;tempw&quot;
              and leave uncontrolled further on

&apos;not_controlled&apos; (default) ionic temperature is not controlled
            </info>
         </var>
         <var name="tempw" type="REAL" >
            <default> 300.D0
            </default>
            <info>
Starting temperature (Kelvin) in MD runs
target temperature for most thermostats.
            </info>
         </var>
         <var name="tolp" type="REAL" >
            <default> 100.D0
            </default>
            <info>
Tolerance for velocity rescaling. Velocities are rescaled if
the run-averaged and target temperature differ more than tolp.
            </info>
         </var>
         <var name="delta_t" type="REAL" >
            <default> 1.D0
            </default>
            <info>
if ion_temperature=&apos;rescale-T&apos;:
       at each step the instantaneous temperature is multiplied
       by delta_t; this is done rescaling all the velocities.

if ion_temperature=&apos;reduce-T&apos;:
       every &apos;nraise&apos; steps the instantaneous temperature is
       reduced by -delta_T (.e. delta_t is added to the temperature)

The instantaneous temperature is calculated at the end of
every ionic move and BEFORE rescaling. This is the temperature
reported in the main output.

For delta_t &lt; 0, the actual average rate of heating or cooling
should be roughly C*delta_t/(nraise*dt) (C=1 for an
ideal gas, C=0.5 for a harmonic solid, theorem of energy
equipartition between all quadratic degrees of freedom).
            </info>
         </var>
         <var name="nraise" type="INTEGER" >
            <default> 1
            </default>
            <info>
if ion_temperature=&apos;reduce-T&apos;:
       every &apos;nraise&apos; steps the instantaneous temperature is
       reduced by -delta_T (.e. delta_t is added to the temperature)

if ion_temperature=&apos;rescale-v&apos;:
       every &apos;nraise&apos; steps the average temperature, computed from
       the last nraise steps, is rescaled to tempw

if ion_temperature=&apos;berendsen&apos;:
       the &quot;rise time&quot; parameter is given in units of the time step:
       tau = nraise*dt, so dt/tau = 1/nraise

if ion_temperature=&apos;andersen&apos;:
       the &quot;collision frequency&quot; parameter is given as nu=1/tau
       defined above, so nu*dt = 1/nraise
            </info>
         </var>
         <var name="refold_pos" type="LOGICAL" >
            <default> .FALSE.
            </default>
            <info>
This keyword applies only in the case of molecular dynamics or
damped dynamics. If true the ions are refolded at each step into
the supercell.
            </info>
         </var>
      </group>
      <group>
         <label>
keywords used only in BFGS calculations
         </label>
         <var name="upscale" type="REAL" >
            <default> 100.D0
            </default>
            <info>
Max reduction factor for conv_thr during structural optimization
conv_thr is automatically reduced when the relaxation
approaches convergence so that forces are still accurate,
but conv_thr will not be reduced to less that
conv_thr / upscale.
            </info>
         </var>
         <var name="bfgs_ndim" type="INTEGER" >
            <default> 1
            </default>
            <info>
Number of old forces and displacements vectors used in the
PULAY mixing of the residual vectors obtained on the basis
of the inverse hessian matrix given by the BFGS algorithm.
When bfgs_ndim = 1, the standard quasi-Newton BFGS method is
used.
(bfgs only)
            </info>
         </var>
         <var name="trust_radius_max" type="REAL" >
            <default> 0.8D0
            </default>
            <info>
Maximum ionic displacement in the structural relaxation.
(bfgs only)
            </info>
         </var>
         <var name="trust_radius_min" type="REAL" >
            <default> 1.D-3
            </default>
            <info>
Minimum ionic displacement in the structural relaxation
BFGS is reset when trust_radius &lt; trust_radius_min.
(bfgs only)
            </info>
         </var>
         <var name="trust_radius_ini" type="REAL" >
            <default> 0.5D0
            </default>
            <info>
Initial ionic displacement in the structural relaxation.
(bfgs only)
            </info>
         </var>
         <var name="w_1" type="REAL" >
            <default> 0.01D0
            </default>
            <see> w_2
            </see>
         </var>
         <var name="w_2" type="REAL" >
            <default> 0.5D0
            </default>
            <info>
Parameters used in line search based on the Wolfe conditions.
(bfgs only)
            </info>
         </var>
      </group>
   </namelist>
   <namelist name="CELL" >
      <label>
input this namelist only if calculation = &apos;vc-relax&apos;, &apos;vc-md&apos;
      </label>
      <var name="cell_dynamics" type="CHARACTER" >
         <info>
Specify the type of dynamics for the cell.
For different type of calculation different possibilities
are allowed and different default values apply:

CASE ( calculation = &apos;vc-relax&apos; )
  &apos;none&apos;:    no dynamics
  &apos;sd&apos;:      steepest descent ( not implemented )
  &apos;damp-pr&apos;: damped (Beeman) dynamics of the Parrinello-Rahman
             extended lagrangian
  &apos;damp-w&apos;:  damped (Beeman) dynamics of the new Wentzcovitch
             extended lagrangian
  &apos;bfgs&apos;:    BFGS quasi-newton algorithm (default)
             ion_dynamics must be &apos;bfgs&apos; too
CASE ( calculation = &apos;vc-md&apos; )
  &apos;none&apos;:    no dynamics
  &apos;pr&apos;:      (Beeman) molecular dynamics of the Parrinello-Rahman
             extended lagrangian
  &apos;w&apos;:       (Beeman) molecular dynamics of the new Wentzcovitch
             extended lagrangian
         </info>
      </var>
      <var name="press" type="REAL" >
         <default> 0.D0
         </default>
         <info>
Target pressure [KBar] in a variable-cell md or relaxation run.
         </info>
      </var>
      <var name="wmass" type="REAL" >
         <default>
0.75*Tot_Mass/pi**2 for Parrinello-Rahman MD;
0.75*Tot_Mass/pi**2/Omega**(2/3) for Wentzcovitch MD
         </default>
         <info>
Fictitious cell mass [amu] for variable-cell simulations
(both &apos;vc-md&apos; and &apos;vc-relax&apos;)
         </info>
      </var>
      <var name="cell_factor" type="REAL" >
         <default> 1.2D0
         </default>
         <info>
Used in the construction of the pseudopotential tables.
It should exceed the maximum linear contraction of the
cell during a simulation.
         </info>
      </var>
      <var name="press_conv_thr" type="REAL" >
         <default> 0.5D0 Kbar
         </default>
         <info>
Convergence threshold on the pressure for variable cell
relaxation (&apos;vc-relax&apos; : note that the other convergence
thresholds for ionic relaxation apply as well).
         </info>
      </var>
      <var name="cell_dofree" type="CHARACTER" >
         <default> &apos;all&apos;
         </default>
         <info>
Select which of the cell parameters should be moved:

all     = all axis and angles are moved
x       = only the x axis is moved
y       = only the y axis is moved
z       = only the z axis is moved
xy      = only the x and y axis are moved, angles are unchanged
xz      = only the x and z axis are moved, angles are unchanged
yz      = only the y and z axis are moved, angles are unchanged
xyz     = x, y and z axis are moved, angles are unchanged
shape   = all axis and angles, keeping the volume fixed
         </info>
      </var>
   </namelist>
   <card name="ATOMIC_SPECIES" >
      <syntax>
         <table name="atomic_species" >
            <rows start="1" end="ntyp" >
               <col name="X" type="CHARACTER" >
                  <info>
label of the atom. Acceptable syntax:
chemical symbol X (1 or 2 characters, case-insensitive)
or &quot;Xn&quot;, n=0,..., 9; &quot;X_*&quot;, &quot;X-*&quot; (e.g. C1, As_h)
                  </info>
               </col>
               <col name="Mass_X" type="REAL" >
                  <info>
mass of the atomic species [amu: mass of C = 12]
not used if calculation=&apos;scf&apos;, &apos;nscf&apos;, &apos;bands&apos;
                  </info>
               </col>
               <col name="PseudoPot_X" type="CHARACTER" >
                  <info>
File containing PP for this species.

The pseudopotential file is assumed to be in the new UPF format.
If it doesn&apos;t work, the pseudopotential format is determined by
the file name:

*.vdb or *.van     Vanderbilt US pseudopotential code
*.RRKJ3            Andrea Dal Corso&apos;s code (old format)
none of the above  old PWscf norm-conserving format
                  </info>
               </col>
            </rows>
         </table>
      </syntax>
   </card>
   <card name="ATOMIC_POSITIONS" >
      <flag name="atompos_unit" use="optional" >
         <enum> alat | bohr | angstrom | crystal
         </enum>
         <default> alat
         </default>
         <info>
alat    : atomic positions are in cartesian coordinates,
          in units of the lattice parameter &quot;a&quot; (default)

bohr    : atomic positions are in cartesian coordinate,
          in atomic units (i.e. Bohr)

angstrom: atomic positions are in cartesian coordinates,
          in Angstrom

crystal : atomic positions are in crystal coordinates, i.e.
          in relative coordinates of the primitive lattice vectors (see below)
         </info>
      </flag>
      <choose>
         <when test="calculation == 'bands' OR calculation == 'nscf'" >
            <message>
Specified atomic positions will be IGNORED and those from the
previous scf calculation will be used instead !!!
            </message>
         </when>
         <elsewhen>
            <syntax>
               <table name="atomic_coordinates" >
                  <rows start="1" end="nat" >
                     <col name="X" type="CHARACTER" >
                        <info> label of the atom as specified in ATOMIC_SPECIES
                        </info>
                     </col>
                     <colgroup type="REAL" >
                        <info>
atomic positions

NOTE: each atomic coordinate can also be specified as a simple algebrical expression.
      To be interpreted correctly expression must NOT contain any blank
      space and must NOT start with a &quot;+&quot; sign. The available expressions are:

        + (plus), - (minus), / (division), * (multiplication), ^ (power)

     All numerical constants included are considered as double-precision numbers;
     i.e. 1/2 is 0.5, not zero. Other functions, such as sin, sqrt or exp are
     not available, although sqrt can be replaced with ^(1/2).

    Example:
                 C  1/3   1/2*3^(-1/2)   0

    is equivalent to

            C  0.333333  0.288675  0.000000

    Please note that this feature is NOT supported by XCrysDen (which will
    display a wrong structure, or nothing at all).
                        </info>
                        <col name="x" >
                        </col>
                        <col name="y" >
                        </col>
                        <col name="z" >
                        </col>
                     </colgroup>
                     <optional>
                        <colgroup type="INTEGER" >
                           <info>
component i of the force for this atom is multiplied by if_pos(i),
which must be either 0 or 1.  Used to keep selected atoms and/or
selected components fixed in MD dynamics or
structural optimization run.
                           </info>
                           <default> 1
                           </default>
                           <col name="if_pos(1)" >
                           </col>
                           <col name="if_pos(2)" >
                           </col>
                           <col name="if_pos(3)" >
                           </col>
                        </colgroup>
                     </optional>
                  </rows>
               </table>
            </syntax>
         </elsewhen>
      </choose>
   </card>
   <card name="K_POINTS" >
      <flag name="kpoint_type" use="optional" >
         <enum> tpiba | automatic | crystal | gamma | tpiba_b | crystal_b
         </enum>
         <default> tbipa
         </default>
         <info>
tpiba    : read k-points in cartesian coordinates,
           in units of 2 pi/a (default)

automatic: automatically generated uniform grid of k-points, i.e,
           generates ( nk1, nk2, nk3 ) grid with ( sk1, sk2, sk3 ) offset.
           nk1, nk2, nk3 as in Monkhorst-Pack grids
           k1, k2, k3 must be 0 ( no offset ) or 1 ( grid displaced
           by half a grid step in the corresponding direction )
           BEWARE: only grids having the full symmetry of the crystal
           work with tetrahedra. Some grids with offset may not work.

crystal  : read k-points in crystal coordinates, i.e. in relative
           coordinates of the reciprocal lattice vectors

gamma    : use k = 0 (no need to list k-point specifications after card)
           In this case wavefunctions can be chosen as real,
           and specialized subroutines optimized for calculations
           at the gamma point are used (memory and cpu requirements
           are reduced by approximately one half).

tpiba_b  : Used for band-structure plots.
           k-points are in units of  2 pi/a.
           nks points specify nks-1 lines in reciprocal space.
           Every couple of points identifies the initial and
           final point of a line. pw.x generates N
           intermediate points of the line where N is the
           weight of the first point.

crystal_b: as tpiba_b, but k-points are in crystal coordinates.
         </info>
      </flag>
      <choose>
         <when test="tpiba  OR  crystal  OR  tpiba_b  OR  crystal_b" >
            <syntax flag="tpiba | crystal | tbiba_b | crystal_b " >
               <line>
                  <var name="nks" type="INTEGER" >
                     <info> Number of supplied special k-points.
                     </info>
                  </var>
               </line>
               <table name="kpoints" >
                  <rows start="1" end="nks" >
                     <colgroup type="REAL" >
                        <col name="xk_x" >
                        </col>
                        <col name="xk_y" >
                        </col>
                        <col name="xk_z" >
                        </col>
                        <col name="wk" >
                        </col>
                        <info>
Special k-points (xk_x/y/z) in the irreducible Brillouin Zone
of the lattice (with all symmetries) and weights (wk)
See the literature for lists of special points and
the corresponding weights.

If the symmetry is lower than the full symmetry
of the lattice, additional points with appropriate
weights are generated.

In a non-scf calculation, weights do not affect the results.
If you just need eigenvalues and eigenvectors (for instance,
for a band-structure plot), weights can be set to any value
(for instance all equal to 1).
                        </info>
                     </colgroup>
                  </rows>
               </table>
            </syntax>
         </when>
         <elsewhen test="automatic" >
            <syntax flag="automatic" >
               <line>
                  <vargroup type="INTEGER" >
                     <var name="nk1" >
                     </var>
                     <var name="nk2" >
                     </var>
                     <var name="nk3" >
                     </var>
                     <info>
These parameters specify the k-point grid
(nk1 x nk2 x nk3) as in Monkhorst-Pack grids.
                     </info>
                  </vargroup>
                  <vargroup type="INTEGER" >
                     <var name="sk1" >
                     </var>
                     <var name="sk2" >
                     </var>
                     <var name="sk3" >
                     </var>
                     <info>
The grid offests;  sk1, sk2, sk3 must be
0 ( no offset ) or 1 ( grid displaced by
half a grid step in the corresponding direction ).
                     </info>
                  </vargroup>
               </line>
            </syntax>
         </elsewhen>
         <elsewhen test="gamma" >
            <syntax flag="gamma" >
            </syntax>
         </elsewhen>
      </choose>
   </card>
   <card name="CELL_PARAMETERS" >
      <flag name="lattice_type" use="optional" >
         <enum> cubic | hexagonal
         </enum>
         <default> cubic
         </default>
         <info>
Flag &quot;cubic&quot; or &quot;hexagonal&quot; specify if you want to look for symmetries
derived from the cubic symmetry group (default) or from the hexagonal
symmetry group (assuming c axis as the z axis, a axis along the x axis).
         </info>
      </flag>
      <label>
Optional card, needed only if ibrav = 0 is specified, ignored otherwise !
      </label>
      <syntax>
         <table name="lattice" >
            <cols start="1" end="3" >
               <rowgroup type="REAL" >
                  <info>
Crystal lattice vectors:
    v1(1)  v1(2)  v1(3)    ... 1st lattice vector
    v2(1)  v2(2)  v2(3)    ... 2nd lattice vector
    v3(1)  v3(2)  v3(3)    ... 3rd lattice vector

In alat units if celldm(1) was specified or in a.u. otherwise.
                  </info>
                  <row name="v1" >
                  </row>
                  <row name="v2" >
                  </row>
                  <row name="v3" >
                  </row>
               </rowgroup>
            </cols>
         </table>
      </syntax>
   </card>
   <card name="CLIMBING_IMAGES" >
      <label>
Optional card, needed only if CI_scheme = &apos;manual&apos;, ignored otherwise !
      </label>
      <syntax>
         <list name="climbing_images_list" type="INTEGER" >
            <format> index1, index2, ... indexN
            </format>
            <info>
index1, index2, ..., indexN are indices of the images to which the
Climbing-Image procedure apply. If more than one image is specified
they must be separated by a comma.
            </info>
         </list>
      </syntax>
   </card>
   <card name="CONSTRAINTS" >
      <label>
Optional card, used for constrained dynamics or constrained optimisations
(only if ion_dynamics=&apos;damp&apos; or &apos;verlet&apos;, variable-cell excepted)
      </label>
      <message>
When this card is present the SHAKE algorithm is automatically used.
      </message>
      <syntax>
         <line>
            <var name="nconstr" type="INTEGER" >
               <info> Number of constraints.
               </info>
            </var>
            <optional>
               <var name="constr_tol" type="REAL" >
                  <info> Tolerance for keeping the constraints satisfied.
                  </info>
               </var>
            </optional>
         </line>
         <table name="constraints_table" >
            <rows start="1" end="nconstr" >
               <col name="constr_type" type="CHARACTER" >
                  <info>
Type of constrain :

&apos;type_coord&apos;      : constraint on global coordination-number, i.e. the
                    average number of atoms of type B surrounding the
                    atoms of type A. The coordination is defined by
                    using a Fermi-Dirac.
                    (four indexes must be specified).

&apos;atom_coord&apos;      : constraint on local coordination-number, i.e. the
                    average number of atoms of type A surrounding a
                    specific atom. The coordination is defined by
                    using a Fermi-Dirac.
                    (four indexes must be specified).

&apos;distance&apos;        : constraint on interatomic distance
                    (two atom indexes must be specified).

&apos;planar_angle&apos;    : constraint on planar angle
                    (three atom indexes must be specified).

&apos;torsional_angle&apos; : constraint on torsional angle
                    (four atom indexes must be specified).

&apos;bennett_proj&apos;    : constraint on the projection onto a given direction
                    of the vector defined by the position of one atom
                    minus the center of mass of the others.
                    ( Ch.H. Bennett in Diffusion in Solids, Recent
                      Developments, Ed. by A.S. Nowick and J.J. Burton,
                      New York 1975 ).
                  </info>
               </col>
               <colgroup>
                  <col name="constr(1)" >
                  </col>
                  <col name="constr(2)" >
                  </col>
                  <conditional>
                     <col name="constr(3)" >
                     </col>
                     <col name="constr(4)" >
                     </col>
                  </conditional>
                  <info>
                      These variables have different meanings
                      for different constraint types:

                     &apos;type_coord&apos; : constr(1) is the first index of the
                                    atomic type involved
                                    constr(2) is the second index of the
                                    atomic type involved
                                    constr(3) is the cut-off radius for
                                    estimating the coordination
                                    constr(4) is a smoothing parameter

                     &apos;atom_coord&apos; : constr(1) is the atom index of the
                                    atom with constrained coordination
                                    constr(2) is the index of the atomic
                                    type involved in the coordination
                                    constr(3) is the cut-off radius for
                                    estimating the coordination
                                    constr(4) is a smoothing parameter

                       &apos;distance&apos; : atoms indices object of the
                                    constraint, as they appear in
                                    the &apos;ATOMIC_POSITION&apos; CARD

&apos;planar_angle&apos;, &apos;torsional_angle&apos; : atoms indices object of the
                                    constraint, as they appear in the
                                    &apos;ATOMIC_POSITION&apos; CARD (beware the
                                    order)

                   &apos;bennett_proj&apos; : constr(1) is the index of the atom
                                    whose position is constrained.
                                    constr(2:4) are the three coordinates
                                    of the vector that specifies the
                                    constraint direction.
                  </info>
               </colgroup>
               <optional>
                  <col name="constr_target" type="REAL" >
                     <info>
Target for the constrain ( angles are specified in degrees ).
This variable is optional.
                     </info>
                  </col>
               </optional>
            </rows>
         </table>
      </syntax>
   </card>
   <card name="OCCUPATIONS" >
      <label> Optional card, used only if occupations = &apos;from_input&apos;, ignored otherwise !
      </label>
      <syntax>
         <table name="occupations_table" >
            <cols start="1" end="nbnd" >
               <row name="f_inp1" type="REAL" >
                  <info>
Occupations of individual states.
For spin-polarized calculation, these are majority spin states.
                  </info>
               </row>
               <conditional>
                  <row name="f_inp2" type="REAL" >
                     <info>
Occupations of minority spin states for spin-polarized calculation;
specify only for spin-polarized calculation.
                     </info>
                  </row>
               </conditional>
            </cols>
         </table>
      </syntax>
   </card>
</input_description>
